scalar ColorHex

scalar DateTime

type Example {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

input ExampleCreateInput {
  name: String!
  id: ID
}

enum ExampleOrderByInput {
  id_ASC
  id_DESC
}

input ExampleWhereInput {
  id: ID
}

input ExampleWhereUniqueInput {
  id: ID!
}

input ExportWhereUniqueInput {
  projectId: ID!
}

type Geometry {
  type: String!
  coordinates: JSON!
}

input GeometryInput {
  type: String!
  coordinates: JSON!
}

type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  externalUrl: String
  name: String!
  path: String!
  mimetype: String!
  height: Int!
  width: Int!
  labels: [Label!]!
  projectId: ID!
}

input ImageCreateInput {
  id: ID
  projectId: ID!
  createdAt: DateTime
  name: String
  path: String
  mimetype: String
  height: Int
  width: Int
  file: Upload
  url: String
  externalUrl: String
}

input ImageWhereInput {
  projectId: ID
}

input ImageWhereUniqueInput {
  id: ID!
}

type ImagesAggregates {
  totalCount: Int!
}

scalar JSON

type Label {
  id: ID!
  type: LabelType!
  createdAt: DateTime!
  updatedAt: DateTime!
  imageId: ID!
  geometry: Geometry!
  labelClass: LabelClass
  x: Float!
  y: Float!
  height: Float!
  width: Float!
}

type LabelClass {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  color: ColorHex!
  labels: [Label!]!
  projectId: ID!
}

input LabelClassCreateInput {
  id: ID
  name: String!
  color: ColorHex!
  projectId: ID!
}

input LabelClassWhereInput {
  projectId: ID
}

input LabelClassWhereUniqueInput {
  id: ID!
}

type LabelClassesAggregates {
  totalCount: Int!
}

input LabelCreateInput {
  id: ID
  type: LabelType
  imageId: ID!
  labelClassId: ID
  geometry: GeometryInput!
}

enum LabelType {
  Polygon
  Box
}

input LabelUpdateInput {
  labelClassId: ID
  geometry: GeometryInput
}

input LabelWhereInput {
  imageId: ID
  labelClassId: ID
  projectId: ID
}

input LabelWhereUniqueInput {
  id: ID!
}

type LabelsAggregates {
  totalCount: Int!
}

type Mutation {
  createExample(data: ExampleCreateInput!): Example
  getUploadTarget(data: UploadTargetInput!): UploadTarget!
  createImage(data: ImageCreateInput!): Image
  createLabel(data: LabelCreateInput!): Label
  updateLabel(where: LabelWhereUniqueInput!, data: LabelUpdateInput!): Label
  deleteLabel(where: LabelWhereUniqueInput!): Label
  createLabelClass(data: LabelClassCreateInput!): LabelClass
  deleteLabelClass(where: LabelClassWhereUniqueInput!): LabelClass
  createProject(data: ProjectCreateInput!): Project
  updateProject(where: ProjectWhereIDInput!, data: ProjectUpdateInput!): Project
  deleteProject(where: ProjectWhereIDInput!): Project
}

type Project {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  images(first: Int, skip: Int): [Image!]!
  labels: [Label!]!
  labelClasses: [LabelClass!]!
  imagesAggregates: ImagesAggregates!
  labelsAggregates: LabelsAggregates!
  labelClassesAggregates: LabelClassesAggregates!
}

input ProjectCreateInput {
  id: ID
  name: String!
}

input ProjectUpdateInput {
  name: String!
}

input ProjectWhereIDInput {
  id: ID!
}

input ProjectWhereUniqueInput {
  id: ID
  name: String
}

type Query {
  hello: String
  example(where: ExampleWhereUniqueInput!): Example!
  examples(where: ExampleWhereInput, first: Int, skip: Int, orderBy: ExampleOrderByInput): [Example!]!
  image(where: ImageWhereUniqueInput!): Image!
  images(where: ImageWhereInput, first: Int, skip: Int): [Image!]!
  imagesAggregates: ImagesAggregates!
  labelClass(where: LabelClassWhereUniqueInput!): LabelClass!
  labelClasses(where: LabelClassWhereInput, first: Int, skip: Int): [LabelClass!]!
  labelClassesAggregates: LabelClassesAggregates!
  labelsAggregates: LabelsAggregates!
  label(where: LabelWhereUniqueInput!): Label!
  labels(where: LabelWhereInput, first: Int, skip: Int): [Label!]!
  project(where: ProjectWhereUniqueInput!): Project!
  projects(first: Int, skip: Int): [Project!]!
  exportToCoco(where: ExportWhereUniqueInput!): String!
  debug: JSON!
}

scalar Upload

union UploadTarget = UploadTargetDirect | UploadTargetHttp

type UploadTargetDirect {
  direct: Boolean!
}

type UploadTargetHttp {
  uploadUrl: String!
  downloadUrl: String!
}

input UploadTargetInput {
  key: String!
}
