scalar ColorHex

scalar DateTime

type Example {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

input ExampleCreateInput {
  name: String!
  id: ID
}

enum ExampleOrderByInput {
  id_ASC
  id_DESC
}

input ExampleWhereInput {
  id: ID
}

input ExampleWhereUniqueInput {
  id: ID!
}

type Image {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  name: String!
  height: Int!
  width: Int!
  labels: [Label!]!
}

input ImageCreateInputWithFile {
  id: ID
  name: String
  file: Upload!
}

input ImageCreateInputWithUrl {
  id: ID
  name: String!
  width: Int!
  height: Int!
  url: String
}

input ImageWhereInput {
  id: ID
}

input ImageWhereUniqueInput {
  id: ID!
}

type Label {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  imageId: ID!
  labelClass: LabelClass
  x: Float!
  y: Float!
  height: Int!
  width: Int!
}

type LabelClass {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  color: ColorHex!
  labels: [Label!]!
}

input LabelClassCreateInput {
  name: String!
  color: ColorHex!
}

input LabelClassWhereUniqueInput {
  id: ID!
}

input LabelCreateInput {
  id: ID
  imageId: ID!
  labelClassId: ID
  x: Float!
  y: Float!
  width: Int!
  height: Int!
}

type Mutation {
  createExample(data: ExampleCreateInput!): Example
  createImage(data: ImageCreateInputWithFile!): Image
  createLabel(data: LabelCreateInput!): Label
  createLabelClass(data: LabelClassCreateInput!): LabelClass
}

type Query {
  hello: String
  example(where: ExampleWhereUniqueInput!): Example!
  examples(where: ExampleWhereInput, first: Int, skip: Int, orderBy: ExampleOrderByInput): [Example!]!
  image(where: ImageWhereUniqueInput!): Image!
  images(where: ImageWhereInput, first: Int, skip: Int): [Image!]!
  labelClass(where: LabelClassWhereUniqueInput!): LabelClass!
  labelClasses(first: Int, skip: Int): [LabelClass!]!
}

scalar Upload
