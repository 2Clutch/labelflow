datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_EXTERNAL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Image {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  url         String
  externalUrl String?
  name        String
  path        String
  mimetype    String
  width       Float
  height      Float
  labels      Label[]
  dataset     Dataset  @relation(fields: [datasetId], references: [id])
  datasetId   String   @db.Uuid
}

enum LabelType {
  Polygon
  Box
}

model Label {
  id           String      @id @default(uuid()) @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  type         LabelType
  x            Float
  y            Float
  height       Float
  width        Float
  geometry     Json
  image        Image       @relation(fields: [imageId], references: [id])
  labelClass   LabelClass? @relation(fields: [labelClassId], references: [id])
  imageId      String      @db.Uuid
  labelClassId String?     @db.Uuid
}

model LabelClass {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String
  labels    Label[]
  dataset   Dataset  @relation(fields: [datasetId], references: [id])
  datasetId String   @db.Uuid
}

model Dataset {
  id           String       @id @default(uuid()) @db.Uuid
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String       @unique
  slug         String       @unique
  labelClasses LabelClass[]
  images       Image[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

// NextAuth requirements https://next-auth.js.org/adapters/prisma
model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}